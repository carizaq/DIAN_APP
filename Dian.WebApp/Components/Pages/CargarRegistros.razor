@page "/cargarPagos"
@using Radzen
@using Radzen.Blazor
@inject IWebHostEnvironment Environment
@inject HttpClient Http;
@inject NotificationService notificationService
@rendermode InteractiveServer



<PageTitle>Consultar Pagos</PageTitle>

<h1>Proceso Carga de Registros</h1>
<hr />
<p>Por favor, seleccione el archivo con los registros de pagos a incluir en el sistema </p>

<div class="row">
    <div class="col-md-6 align-left">
        <RadzenUpload Url="upload/single" Style="margin-bottom:20px;" Accept=".xml,.json" Progress="@((args) => @OnProgresoCarga(args,"Archivo"))"></RadzenUpload>
    </div>
</div>
<div class="col-md-6 align-left">
    <h3>Proceso Carga</h3>
    <RadzenCard Style="overflow:auto; height:100px">
        <RadzenProgressBar Value="@progresoCarga" Unit="@info" Style="margin-bottom: 20px;" Visible=@(progresoCarga>=0) />
    </RadzenCard>
</div>

@code {
    bool esVisibleAlert = false;
    //InputFileChangeEventArgs ArgumentosCargue;
    int progresoCarga;
    string info = "";
    string ArchivoActual = "";
    string mensajeAlerta = string.Empty;

    /// <summary>
    /// Método para procesar archivo
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    // void CargaArchivos(InputFileChangeEventArgs args)
    // {
    //     ArgumentosCargue = args;
    //     NoPuedeCargar2 = false;
    //     ArchivoActual = ArgumentosCargue.File.Name;
    // }

    // void OnFileInputChange(FileInputEventArgs args)
    // {
    //     fileContent = args.FileContentAsBase64;
    //     // Aquí puedes procesar el contenido del archivo como desees
    // }

    async Task OnProgresoCarga(UploadProgressArgs args, string name)
    {
        this.info = $"%'{name}'/{args.Loaded} of {args.Total} bytes.";
        if (args.Total > 50000000)
        {   
            //Display the notification
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Detail = "El archivo es mayor a 50 Mb, no es posible procesarlo",                    
                    Duration=40000
                    
                });            
            return;
        }

        this.progresoCarga = args.Progress;
        var salida = await Http.PostAsJsonAsync($"Archivo/CargarArchivo",args.Files.FirstOrDefault());
        var responseBody = await salida.Content.ReadAsStringAsync();

    }
}